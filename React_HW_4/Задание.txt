Создаём проект используя Vite.
Выводим интерактивный список пациентов.

Файл patients.json содержит список пациентов.
	В этом файле массив с 50 объектами.
	Каждый объект - это информация о пациенте.
	В объекте есть поля:
		name - имя пациента. (Строка)
		surname - фамилия пациента (Строка)
		age -  возраст пациента (число)
		gender - пол пациента (Строка 'M' или 'F')
		kids - количество детей (число 0-4)
		vaccinated - делал ли прививку (булевое значение)

Также, есть App.css, файл с CSS стилями.
Несколько иконок, которые можно положить в assets.

Незабудьте удалить/стереть всё лишнее, лишние компоненты, импорты, CSS стили.

I. Сделайте вывод списка пациентов
	1) Создайте компонент Table
	2) Сделайте вывод в виде html таблицы
		a. Элемент <table> с классом "patient-table"
	3) Создайте для этого компоненты TableHead, TableBody, TableRow
	4) Компонент TableHead
			a. Выводит <thead> с классом "table-head"
			b. Элемент <tr> с классом "table-head-row"
			c. Колонки <th> с классом "table-head-cell", можно добавить data-name атрибут с ключом, какое поле эта ячейка выводит, с колонками:
				Имя, Фамилия, Возраст, Пол, Количество детей, Прививка от COVID-19
	5) Компонент TableHead выводит <thead>, в котором по циклу будут выводиться компоненты TableRow для каждого пациента
	6) В компоненте TableRow будут колонки:
			a. Имя - строка
			b. Фамилия - строка
			c. Возраст - число
			d. Пол - М либо Ж, а также иконка: Копьё Марса, либо Зеркало Венеры
			e. Количество детей - число
			f. Прививка от COVID-19 - иконка с чекбоксом
	7) Компонент App отображает:
			a. Обёртка <div> с классом "app-wrapper", в которую внутрь будет помещаться всё остальное содержимое
			b. Заголовое <h1> с классом "app-title", с текстом "Список пациентов"
	8) Внутри файла App.jsx:
			a. Импортируйте patients.json
				import patientsData from "./patients.json";
			b. Используйте его как state для компонента App
			c. Передайте этот список в Table как props для рендера

II. Сортировка
	1) В компоненте App создайте состояния:
			a. sortKey - значение, по которому будет сортировка (По умолчанию none)
			b. sortDir - направление сортировки (По умолчанию none)
	2) В компоненте App создайте обработчик событий sortUsers
	3) Передайте его в Table, а там передайте в TableHead
		a. При клике на <th> с названием колонки - будет вызываться этот обработчик событий
			В качестве аргумента передаётся ключ этого поля: name, age и т.д.
		b. При клике по заголовку - сортировка по возрастанию этого поля, повторный клик по этому же заголовку - сортировка по убыванию этого поля и т.д.
	4) В обработчике событий добавьте проверку:
		a. Если кликнули по полю, ключ которого не совпадает с sortKey, отсортировать пользователей, по этому полю, по возрастанию. 
			В sortKey и sortDir это обязательно сохранить
		b. Если кликнули по полю, ключ которого совпадает с sortKey, то изменить направление сортировки на следующую:
		c. Сортировка идёт по кругу в таких вариантах: Asc -> Desc -> None -> Asc -> Desc -> None
	5) Можете для сортировки, при необходимости создать вспомогательные функции
	6) Рендерить отсортированный массив
	7*) Доработайте <th> в TableHead, если это ячейка, по которой идёт сортировка, в зависимости от направления сортировки, добавлять после заголовка " ▲" или " ▼"

III. Фильтрация
	1) Создайте компонент FilterForm
	2) Добавьте его в компоненте App над компонентом Table
	3) FilterForm - это <div> с классом "filter-form", со следующими полями внутри (если нужно, можете добавлять любые <label> и <div> для красивого отображения):
		a. Имя - текстовое поле. <input class="filter-input" />
			При вводе значений в этом поле - фильтруем пациентов, оставляя тех, у кого в Имени или Фамилии есть введёная подстрока (Без учёта регистра)
		b. Минимальный возраст - числовое поле. <input class="filter-input" />
			При вводе значений в этом поле - фильтруем пациентов, оставляя тех, у кого возраст больше или равен этому числу.
		c. Максимальный возраст - числовое поле. <input class="filter-input" />
			При вводе значений в этом поле - фильтруем пациентов, оставляя тех, у кого возраст меньше или равен этому числу.
		d. Количество детей - числовое поле. <input class="filter-input" />
			При вводе значений в этом поле - фильтруем пациентов, оставляя тех, у кого количество детей равно этому числу.
		e. Наличие прививки - чекбокс поле <label class="filter-checkbox"><input /></label>
			При нажатом чекбоксе - фильтруем пациентов, оставляя тех, у кого это поле true
			При отжатом значении - выводим всех
	4) Для этого нужно создать состояние для каждого поля фильтрации, либо просто состояние filterValues, которое будет объектом, у которого под каждый фильтр будет отдельное свойство. И передать их в FilterForm
	5) Нужно добавить в App обработчик событий который будет запускать фильтрацию, и передать его в FilterForm и привязать к полям
	6) На экран рендерятся только пациенты прошедшие и сортировку, и фильтрацию
	7*) Добавьте для полей Минимальный возраст, Максимальный возраст и Количество детей минимальные и максимальные возможные значения
		a. Минимальное значение для minAge - вычисляется в начале, при рендере страницы, исходя из минимального имеющегося
		b. Максимальное значение для minAge - равно maxAge
		c. Минимальное значение для maxAge - равно minAge
		d. Максимальное значение для maxAge - вычисляется в начале, при рендере страницы, исходя из максимального имеющегося
		e. Минимальное значение для количества детей - вычисляется в начале, при рендере страницы, исходя из минимального имеющегося
		f. Максимальное значение для maxAge - вычисляется в начале, при рендере страницы, исходя из максимального имеющегося
		g. Для вычисления этих значений можете добавить функции вычисляющие это. Например, сделать .map(), чтобы получить только нужные значения, потом использовать с массивом Math.min() и Math.max()

IV. Пагинация
	1) Создайте компонент Pagination
	2) Добавьте его в компоненте App после компонента Table
	3) Pagination - это <div> с классом "pagination-wrapper" со следующими полями содержимым внутри:
		a. <select> "pagination-select" - выпадающим списком, с количеством пациентов за страницу. В <option> будут варианты 5, 10 и 20.
		b. Обёртка <ul> с классом "pagination-list-wrapper", которая будет содержать кнопки пагинации.
		c. Внутри обёртки будут кнопки пагинации, <li> с классом "pagination-list-item". Для текущей страницы будет ещё класс "active"
			Кнопок будет столько, сколько требуется страниц, с учётом itemsPerPage
	4) Добавить для App состояния:
		a. currentPage - текущая страница (начальное значение 1)
		a. itemsPerPage - количество пациентов на странице (начальное значение 10)
		a. currentPageItems - пациенты текущей страницы
	5) На экран рендерятся только пациенты прошедшие и сортировку, и фильтрацию, с текущей страницы
	6*) Добавьте внутри "pagination-list-wrapper" две кнопки, до и после кнопок с числами, с текстом "« Пред" и "След »", которые будут переходить на предыдущую/следующую, от текущей, страницы
